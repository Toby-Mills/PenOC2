#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Penoc")]
	public partial class PenOCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertlutCategory(lutCategory instance);
    partial void UpdatelutCategory(lutCategory instance);
    partial void DeletelutCategory(lutCategory instance);
    partial void InserttblVenue(tblVenue instance);
    partial void UpdatetblVenue(tblVenue instance);
    partial void DeletetblVenue(tblVenue instance);
    partial void InsertlutClub(lutClub instance);
    partial void UpdatelutClub(lutClub instance);
    partial void DeletelutClub(lutClub instance);
    partial void InsertlutEventType(lutEventType instance);
    partial void UpdatelutEventType(lutEventType instance);
    partial void DeletelutEventType(lutEventType instance);
    partial void InsertlutGender(lutGender instance);
    partial void UpdatelutGender(lutGender instance);
    partial void DeletelutGender(lutGender instance);
    partial void InsertlutTechnical(lutTechnical instance);
    partial void UpdatelutTechnical(lutTechnical instance);
    partial void DeletelutTechnical(lutTechnical instance);
    partial void InserttblCommittee(tblCommittee instance);
    partial void UpdatetblCommittee(tblCommittee instance);
    partial void DeletetblCommittee(tblCommittee instance);
    partial void InserttblCompetitor(tblCompetitor instance);
    partial void UpdatetblCompetitor(tblCompetitor instance);
    partial void DeletetblCompetitor(tblCompetitor instance);
    partial void InserttblCourse(tblCourse instance);
    partial void UpdatetblCourse(tblCourse instance);
    partial void DeletetblCourse(tblCourse instance);
    partial void InserttblDownload(tblDownload instance);
    partial void UpdatetblDownload(tblDownload instance);
    partial void DeletetblDownload(tblDownload instance);
    partial void InserttblEvent(tblEvent instance);
    partial void UpdatetblEvent(tblEvent instance);
    partial void DeletetblEvent(tblEvent instance);
    partial void InserttblEvent_EventType(tblEvent_EventType instance);
    partial void UpdatetblEvent_EventType(tblEvent_EventType instance);
    partial void DeletetblEvent_EventType(tblEvent_EventType instance);
    partial void InserttblFile(tblFile instance);
    partial void UpdatetblFile(tblFile instance);
    partial void DeletetblFile(tblFile instance);
    partial void InserttblLog(tblLog instance);
    partial void UpdatetblLog(tblLog instance);
    partial void DeletetblLog(tblLog instance);
    partial void InserttblNews(tblNews instance);
    partial void UpdatetblNews(tblNews instance);
    partial void DeletetblNews(tblNews instance);
    partial void InserttblResult(tblResult instance);
    partial void UpdatetblResult(tblResult instance);
    partial void DeletetblResult(tblResult instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    #endregion
		
		public PenOCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PenocConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PenOCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PenOCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PenOCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PenOCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<lutCategory> lutCategories
		{
			get
			{
				return this.GetTable<lutCategory>();
			}
		}
		
		public System.Data.Linq.Table<tblVenue> tblVenues
		{
			get
			{
				return this.GetTable<tblVenue>();
			}
		}
		
		public System.Data.Linq.Table<lutClub> lutClubs
		{
			get
			{
				return this.GetTable<lutClub>();
			}
		}
		
		public System.Data.Linq.Table<lutEventType> lutEventTypes
		{
			get
			{
				return this.GetTable<lutEventType>();
			}
		}
		
		public System.Data.Linq.Table<lutGender> lutGenders
		{
			get
			{
				return this.GetTable<lutGender>();
			}
		}
		
		public System.Data.Linq.Table<lutTechnical> lutTechnicals
		{
			get
			{
				return this.GetTable<lutTechnical>();
			}
		}
		
		public System.Data.Linq.Table<tblCommittee> tblCommittees
		{
			get
			{
				return this.GetTable<tblCommittee>();
			}
		}
		
		public System.Data.Linq.Table<tblCompetitor> tblCompetitors
		{
			get
			{
				return this.GetTable<tblCompetitor>();
			}
		}
		
		public System.Data.Linq.Table<tblCourse> tblCourses
		{
			get
			{
				return this.GetTable<tblCourse>();
			}
		}
		
		public System.Data.Linq.Table<tblDownload> tblDownloads
		{
			get
			{
				return this.GetTable<tblDownload>();
			}
		}
		
		public System.Data.Linq.Table<tblEvent> tblEvents
		{
			get
			{
				return this.GetTable<tblEvent>();
			}
		}
		
		public System.Data.Linq.Table<tblEvent_EventType> tblEvent_EventTypes
		{
			get
			{
				return this.GetTable<tblEvent_EventType>();
			}
		}
		
		public System.Data.Linq.Table<tblFile> tblFiles
		{
			get
			{
				return this.GetTable<tblFile>();
			}
		}
		
		public System.Data.Linq.Table<tblLog> tblLogs
		{
			get
			{
				return this.GetTable<tblLog>();
			}
		}
		
		public System.Data.Linq.Table<tblNews> tblNews
		{
			get
			{
				return this.GetTable<tblNews>();
			}
		}
		
		public System.Data.Linq.Table<tblResult> tblResults
		{
			get
			{
				return this.GetTable<tblResult>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lutCategory")]
	public partial class lutCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCategory;
		
		private string _strCategory;
		
		private System.Nullable<int> _intGender;
		
		private EntitySet<tblCompetitor> _tblCompetitors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCategoryChanging(int value);
    partial void OnidCategoryChanged();
    partial void OnstrCategoryChanging(string value);
    partial void OnstrCategoryChanged();
    partial void OnintGenderChanging(System.Nullable<int> value);
    partial void OnintGenderChanged();
    #endregion
		
		public lutCategory()
		{
			this._tblCompetitors = new EntitySet<tblCompetitor>(new Action<tblCompetitor>(this.attach_tblCompetitors), new Action<tblCompetitor>(this.detach_tblCompetitors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategory", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idCategory
		{
			get
			{
				return this._idCategory;
			}
			set
			{
				if ((this._idCategory != value))
				{
					this.OnidCategoryChanging(value);
					this.SendPropertyChanging();
					this._idCategory = value;
					this.SendPropertyChanged("idCategory");
					this.OnidCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strCategory", DbType="NVarChar(50)")]
		public string strCategory
		{
			get
			{
				return this._strCategory;
			}
			set
			{
				if ((this._strCategory != value))
				{
					this.OnstrCategoryChanging(value);
					this.SendPropertyChanging();
					this._strCategory = value;
					this.SendPropertyChanged("strCategory");
					this.OnstrCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intGender", DbType="Int")]
		public System.Nullable<int> intGender
		{
			get
			{
				return this._intGender;
			}
			set
			{
				if ((this._intGender != value))
				{
					this.OnintGenderChanging(value);
					this.SendPropertyChanging();
					this._intGender = value;
					this.SendPropertyChanged("intGender");
					this.OnintGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutCategory_tblCompetitor", Storage="_tblCompetitors", ThisKey="idCategory", OtherKey="intCategory")]
		public EntitySet<tblCompetitor> tblCompetitors
		{
			get
			{
				return this._tblCompetitors;
			}
			set
			{
				this._tblCompetitors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCompetitors(tblCompetitor entity)
		{
			this.SendPropertyChanging();
			entity.lutCategory = this;
		}
		
		private void detach_tblCompetitors(tblCompetitor entity)
		{
			this.SendPropertyChanging();
			entity.lutCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVenue")]
	public partial class tblVenue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVenue;
		
		private string _strName;
		
		private EntitySet<tblEvent> _tblEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVenueChanging(int value);
    partial void OnidVenueChanged();
    partial void OnstrNameChanging(string value);
    partial void OnstrNameChanged();
    #endregion
		
		public tblVenue()
		{
			this._tblEvents = new EntitySet<tblEvent>(new Action<tblEvent>(this.attach_tblEvents), new Action<tblEvent>(this.detach_tblEvents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVenue", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVenue
		{
			get
			{
				return this._idVenue;
			}
			set
			{
				if ((this._idVenue != value))
				{
					this.OnidVenueChanging(value);
					this.SendPropertyChanging();
					this._idVenue = value;
					this.SendPropertyChanged("idVenue");
					this.OnidVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strName", DbType="NVarChar(50)")]
		public string strName
		{
			get
			{
				return this._strName;
			}
			set
			{
				if ((this._strName != value))
				{
					this.OnstrNameChanging(value);
					this.SendPropertyChanging();
					this._strName = value;
					this.SendPropertyChanged("strName");
					this.OnstrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVenue_tblEvent", Storage="_tblEvents", ThisKey="idVenue", OtherKey="intVenue")]
		public EntitySet<tblEvent> tblEvents
		{
			get
			{
				return this._tblEvents;
			}
			set
			{
				this._tblEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEvents(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblVenue = this;
		}
		
		private void detach_tblEvents(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblVenue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lutClub")]
	public partial class lutClub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClub;
		
		private string _strFullName;
		
		private string _strShortName;
		
		private EntitySet<tblEvent> _tblEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClubChanging(int value);
    partial void OnidClubChanged();
    partial void OnstrFullNameChanging(string value);
    partial void OnstrFullNameChanged();
    partial void OnstrShortNameChanging(string value);
    partial void OnstrShortNameChanged();
    #endregion
		
		public lutClub()
		{
			this._tblEvents = new EntitySet<tblEvent>(new Action<tblEvent>(this.attach_tblEvents), new Action<tblEvent>(this.detach_tblEvents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClub", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClub
		{
			get
			{
				return this._idClub;
			}
			set
			{
				if ((this._idClub != value))
				{
					this.OnidClubChanging(value);
					this.SendPropertyChanging();
					this._idClub = value;
					this.SendPropertyChanged("idClub");
					this.OnidClubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strFullName", DbType="NVarChar(100)")]
		public string strFullName
		{
			get
			{
				return this._strFullName;
			}
			set
			{
				if ((this._strFullName != value))
				{
					this.OnstrFullNameChanging(value);
					this.SendPropertyChanging();
					this._strFullName = value;
					this.SendPropertyChanged("strFullName");
					this.OnstrFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strShortName", DbType="NVarChar(50)")]
		public string strShortName
		{
			get
			{
				return this._strShortName;
			}
			set
			{
				if ((this._strShortName != value))
				{
					this.OnstrShortNameChanging(value);
					this.SendPropertyChanging();
					this._strShortName = value;
					this.SendPropertyChanged("strShortName");
					this.OnstrShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutClub_tblEvent", Storage="_tblEvents", ThisKey="idClub", OtherKey="intOrganisingClub")]
		public EntitySet<tblEvent> tblEvents
		{
			get
			{
				return this._tblEvents;
			}
			set
			{
				this._tblEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEvents(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.lutClub = this;
		}
		
		private void detach_tblEvents(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.lutClub = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lutEventType")]
	public partial class lutEventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEventType;
		
		private string _strEventType;
		
		private string _strEventTypeIcon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEventTypeChanging(int value);
    partial void OnidEventTypeChanged();
    partial void OnstrEventTypeChanging(string value);
    partial void OnstrEventTypeChanged();
    partial void OnstrEventTypeIconChanging(string value);
    partial void OnstrEventTypeIconChanged();
    #endregion
		
		public lutEventType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEventType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEventType
		{
			get
			{
				return this._idEventType;
			}
			set
			{
				if ((this._idEventType != value))
				{
					this.OnidEventTypeChanging(value);
					this.SendPropertyChanging();
					this._idEventType = value;
					this.SendPropertyChanged("idEventType");
					this.OnidEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strEventType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string strEventType
		{
			get
			{
				return this._strEventType;
			}
			set
			{
				if ((this._strEventType != value))
				{
					this.OnstrEventTypeChanging(value);
					this.SendPropertyChanging();
					this._strEventType = value;
					this.SendPropertyChanged("strEventType");
					this.OnstrEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strEventTypeIcon", DbType="VarChar(50)")]
		public string strEventTypeIcon
		{
			get
			{
				return this._strEventTypeIcon;
			}
			set
			{
				if ((this._strEventTypeIcon != value))
				{
					this.OnstrEventTypeIconChanging(value);
					this.SendPropertyChanging();
					this._strEventTypeIcon = value;
					this.SendPropertyChanged("strEventTypeIcon");
					this.OnstrEventTypeIconChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lutGender")]
	public partial class lutGender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGender;
		
		private string _strGender;
		
		private EntitySet<tblCompetitor> _tblCompetitors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGenderChanging(int value);
    partial void OnidGenderChanged();
    partial void OnstrGenderChanging(string value);
    partial void OnstrGenderChanged();
    #endregion
		
		public lutGender()
		{
			this._tblCompetitors = new EntitySet<tblCompetitor>(new Action<tblCompetitor>(this.attach_tblCompetitors), new Action<tblCompetitor>(this.detach_tblCompetitors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGender", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGender
		{
			get
			{
				return this._idGender;
			}
			set
			{
				if ((this._idGender != value))
				{
					this.OnidGenderChanging(value);
					this.SendPropertyChanging();
					this._idGender = value;
					this.SendPropertyChanged("idGender");
					this.OnidGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strGender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string strGender
		{
			get
			{
				return this._strGender;
			}
			set
			{
				if ((this._strGender != value))
				{
					this.OnstrGenderChanging(value);
					this.SendPropertyChanging();
					this._strGender = value;
					this.SendPropertyChanged("strGender");
					this.OnstrGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutGender_tblCompetitor", Storage="_tblCompetitors", ThisKey="idGender", OtherKey="intGender")]
		public EntitySet<tblCompetitor> tblCompetitors
		{
			get
			{
				return this._tblCompetitors;
			}
			set
			{
				this._tblCompetitors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCompetitors(tblCompetitor entity)
		{
			this.SendPropertyChanging();
			entity.lutGender = this;
		}
		
		private void detach_tblCompetitors(tblCompetitor entity)
		{
			this.SendPropertyChanging();
			entity.lutGender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lutTechnical")]
	public partial class lutTechnical : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTechnical;
		
		private string _strTechnical;
		
		private System.Nullable<decimal> _decScaleFactor;
		
		private EntitySet<tblCourse> _tblCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTechnicalChanging(int value);
    partial void OnidTechnicalChanged();
    partial void OnstrTechnicalChanging(string value);
    partial void OnstrTechnicalChanged();
    partial void OndecScaleFactorChanging(System.Nullable<decimal> value);
    partial void OndecScaleFactorChanged();
    #endregion
		
		public lutTechnical()
		{
			this._tblCourses = new EntitySet<tblCourse>(new Action<tblCourse>(this.attach_tblCourses), new Action<tblCourse>(this.detach_tblCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTechnical", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idTechnical
		{
			get
			{
				return this._idTechnical;
			}
			set
			{
				if ((this._idTechnical != value))
				{
					this.OnidTechnicalChanging(value);
					this.SendPropertyChanging();
					this._idTechnical = value;
					this.SendPropertyChanged("idTechnical");
					this.OnidTechnicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTechnical", DbType="NVarChar(50)")]
		public string strTechnical
		{
			get
			{
				return this._strTechnical;
			}
			set
			{
				if ((this._strTechnical != value))
				{
					this.OnstrTechnicalChanging(value);
					this.SendPropertyChanging();
					this._strTechnical = value;
					this.SendPropertyChanged("strTechnical");
					this.OnstrTechnicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decScaleFactor", DbType="Decimal(3,2)")]
		public System.Nullable<decimal> decScaleFactor
		{
			get
			{
				return this._decScaleFactor;
			}
			set
			{
				if ((this._decScaleFactor != value))
				{
					this.OndecScaleFactorChanging(value);
					this.SendPropertyChanging();
					this._decScaleFactor = value;
					this.SendPropertyChanged("decScaleFactor");
					this.OndecScaleFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutTechnical_tblCourse", Storage="_tblCourses", ThisKey="idTechnical", OtherKey="intTechnical")]
		public EntitySet<tblCourse> tblCourses
		{
			get
			{
				return this._tblCourses;
			}
			set
			{
				this._tblCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.lutTechnical = this;
		}
		
		private void detach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.lutTechnical = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCommittee")]
	public partial class tblCommittee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _intCompetitor;
		
		private string _strPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnintCompetitorChanging(int value);
    partial void OnintCompetitorChanged();
    partial void OnstrPositionChanging(string value);
    partial void OnstrPositionChanged();
    #endregion
		
		public tblCommittee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCompetitor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intCompetitor
		{
			get
			{
				return this._intCompetitor;
			}
			set
			{
				if ((this._intCompetitor != value))
				{
					this.OnintCompetitorChanging(value);
					this.SendPropertyChanging();
					this._intCompetitor = value;
					this.SendPropertyChanged("intCompetitor");
					this.OnintCompetitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strPosition", DbType="VarChar(50)")]
		public string strPosition
		{
			get
			{
				return this._strPosition;
			}
			set
			{
				if ((this._strPosition != value))
				{
					this.OnstrPositionChanging(value);
					this.SendPropertyChanging();
					this._strPosition = value;
					this.SendPropertyChanged("strPosition");
					this.OnstrPositionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCompetitor")]
	public partial class tblCompetitor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCompetitor;
		
		private string _strFirstName;
		
		private string _strSurname;
		
		private System.Nullable<int> _intGender;
		
		private System.Nullable<int> _intCategory;
		
		private System.Nullable<System.DateTime> _dteBirthDate;
		
		private string _strTelephone1;
		
		private string _strTelephone2;
		
		private string _strEmail;
		
		private string _strReadOnlyFullName;
		
		private System.Nullable<long> _intEmitNumber;
		
		private string _strReadOnlyFirstNameMatch;
		
		private string _strReadOnlySurnameMatch;
		
		private EntitySet<tblEvent> _tblEventsPlanner;
		
		private EntitySet<tblEvent> _tblEventsController;
		
		private EntitySet<tblResult> _tblResults;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<lutCategory> _lutCategory;
		
		private EntityRef<lutGender> _lutGender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCompetitorChanging(int value);
    partial void OnidCompetitorChanged();
    partial void OnstrFirstNameChanging(string value);
    partial void OnstrFirstNameChanged();
    partial void OnstrSurnameChanging(string value);
    partial void OnstrSurnameChanged();
    partial void OnintGenderChanging(System.Nullable<int> value);
    partial void OnintGenderChanged();
    partial void OnintCategoryChanging(System.Nullable<int> value);
    partial void OnintCategoryChanged();
    partial void OndteBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OndteBirthDateChanged();
    partial void OnstrTelephone1Changing(string value);
    partial void OnstrTelephone1Changed();
    partial void OnstrTelephone2Changing(string value);
    partial void OnstrTelephone2Changed();
    partial void OnstrEmailChanging(string value);
    partial void OnstrEmailChanged();
    partial void OnstrReadOnlyFullNameChanging(string value);
    partial void OnstrReadOnlyFullNameChanged();
    partial void OnintEmitNumberChanging(System.Nullable<long> value);
    partial void OnintEmitNumberChanged();
    partial void OnstrReadOnlyFirstNameMatchChanging(string value);
    partial void OnstrReadOnlyFirstNameMatchChanged();
    partial void OnstrReadOnlySurnameMatchChanging(string value);
    partial void OnstrReadOnlySurnameMatchChanged();
    #endregion
		
		public tblCompetitor()
		{
			this._tblEventsPlanner = new EntitySet<tblEvent>(new Action<tblEvent>(this.attach_tblEventsPlanner), new Action<tblEvent>(this.detach_tblEventsPlanner));
			this._tblEventsController = new EntitySet<tblEvent>(new Action<tblEvent>(this.attach_tblEventsController), new Action<tblEvent>(this.detach_tblEventsController));
			this._tblResults = new EntitySet<tblResult>(new Action<tblResult>(this.attach_tblResults), new Action<tblResult>(this.detach_tblResults));
			this._tblUser = default(EntityRef<tblUser>);
			this._lutCategory = default(EntityRef<lutCategory>);
			this._lutGender = default(EntityRef<lutGender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompetitor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCompetitor
		{
			get
			{
				return this._idCompetitor;
			}
			set
			{
				if ((this._idCompetitor != value))
				{
					this.OnidCompetitorChanging(value);
					this.SendPropertyChanging();
					this._idCompetitor = value;
					this.SendPropertyChanged("idCompetitor");
					this.OnidCompetitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strFirstName", DbType="NVarChar(100)")]
		public string strFirstName
		{
			get
			{
				return this._strFirstName;
			}
			set
			{
				if ((this._strFirstName != value))
				{
					this.OnstrFirstNameChanging(value);
					this.SendPropertyChanging();
					this._strFirstName = value;
					this.SendPropertyChanged("strFirstName");
					this.OnstrFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strSurname", DbType="NVarChar(100)")]
		public string strSurname
		{
			get
			{
				return this._strSurname;
			}
			set
			{
				if ((this._strSurname != value))
				{
					this.OnstrSurnameChanging(value);
					this.SendPropertyChanging();
					this._strSurname = value;
					this.SendPropertyChanged("strSurname");
					this.OnstrSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intGender", DbType="Int")]
		public System.Nullable<int> intGender
		{
			get
			{
				return this._intGender;
			}
			set
			{
				if ((this._intGender != value))
				{
					if (this._lutGender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintGenderChanging(value);
					this.SendPropertyChanging();
					this._intGender = value;
					this.SendPropertyChanged("intGender");
					this.OnintGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCategory", DbType="Int")]
		public System.Nullable<int> intCategory
		{
			get
			{
				return this._intCategory;
			}
			set
			{
				if ((this._intCategory != value))
				{
					if (this._lutCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintCategoryChanging(value);
					this.SendPropertyChanging();
					this._intCategory = value;
					this.SendPropertyChanged("intCategory");
					this.OnintCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dteBirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> dteBirthDate
		{
			get
			{
				return this._dteBirthDate;
			}
			set
			{
				if ((this._dteBirthDate != value))
				{
					this.OndteBirthDateChanging(value);
					this.SendPropertyChanging();
					this._dteBirthDate = value;
					this.SendPropertyChanged("dteBirthDate");
					this.OndteBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTelephone1", DbType="VarChar(50)")]
		public string strTelephone1
		{
			get
			{
				return this._strTelephone1;
			}
			set
			{
				if ((this._strTelephone1 != value))
				{
					this.OnstrTelephone1Changing(value);
					this.SendPropertyChanging();
					this._strTelephone1 = value;
					this.SendPropertyChanged("strTelephone1");
					this.OnstrTelephone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTelephone2", DbType="VarChar(50)")]
		public string strTelephone2
		{
			get
			{
				return this._strTelephone2;
			}
			set
			{
				if ((this._strTelephone2 != value))
				{
					this.OnstrTelephone2Changing(value);
					this.SendPropertyChanging();
					this._strTelephone2 = value;
					this.SendPropertyChanged("strTelephone2");
					this.OnstrTelephone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strEmail", DbType="VarChar(200)")]
		public string strEmail
		{
			get
			{
				return this._strEmail;
			}
			set
			{
				if ((this._strEmail != value))
				{
					this.OnstrEmailChanging(value);
					this.SendPropertyChanging();
					this._strEmail = value;
					this.SendPropertyChanged("strEmail");
					this.OnstrEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strReadOnlyFullName", DbType="VarChar(200)")]
		public string strReadOnlyFullName
		{
			get
			{
				return this._strReadOnlyFullName;
			}
			set
			{
				if ((this._strReadOnlyFullName != value))
				{
					this.OnstrReadOnlyFullNameChanging(value);
					this.SendPropertyChanging();
					this._strReadOnlyFullName = value;
					this.SendPropertyChanged("strReadOnlyFullName");
					this.OnstrReadOnlyFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intEmitNumber", DbType="BigInt")]
		public System.Nullable<long> intEmitNumber
		{
			get
			{
				return this._intEmitNumber;
			}
			set
			{
				if ((this._intEmitNumber != value))
				{
					this.OnintEmitNumberChanging(value);
					this.SendPropertyChanging();
					this._intEmitNumber = value;
					this.SendPropertyChanged("intEmitNumber");
					this.OnintEmitNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strReadOnlyFirstNameMatch", DbType="NVarChar(100)")]
		public string strReadOnlyFirstNameMatch
		{
			get
			{
				return this._strReadOnlyFirstNameMatch;
			}
			set
			{
				if ((this._strReadOnlyFirstNameMatch != value))
				{
					this.OnstrReadOnlyFirstNameMatchChanging(value);
					this.SendPropertyChanging();
					this._strReadOnlyFirstNameMatch = value;
					this.SendPropertyChanged("strReadOnlyFirstNameMatch");
					this.OnstrReadOnlyFirstNameMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strReadOnlySurnameMatch", DbType="NVarChar(100)")]
		public string strReadOnlySurnameMatch
		{
			get
			{
				return this._strReadOnlySurnameMatch;
			}
			set
			{
				if ((this._strReadOnlySurnameMatch != value))
				{
					this.OnstrReadOnlySurnameMatchChanging(value);
					this.SendPropertyChanging();
					this._strReadOnlySurnameMatch = value;
					this.SendPropertyChanged("strReadOnlySurnameMatch");
					this.OnstrReadOnlySurnameMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblEvent", Storage="_tblEventsPlanner", ThisKey="idCompetitor", OtherKey="intPlanner")]
		public EntitySet<tblEvent> tblEventsPlanner
		{
			get
			{
				return this._tblEventsPlanner;
			}
			set
			{
				this._tblEventsPlanner.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblEvent1", Storage="_tblEventsController", ThisKey="idCompetitor", OtherKey="intController")]
		public EntitySet<tblEvent> tblEventsController
		{
			get
			{
				return this._tblEventsController;
			}
			set
			{
				this._tblEventsController.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblResult", Storage="_tblResults", ThisKey="idCompetitor", OtherKey="intCompetitor")]
		public EntitySet<tblResult> tblResults
		{
			get
			{
				return this._tblResults;
			}
			set
			{
				this._tblResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblUser", Storage="_tblUser", ThisKey="idCompetitor", OtherKey="intCompetitor", IsUnique=true, IsForeignKey=false)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblCompetitor = null;
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblCompetitor = this;
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutCategory_tblCompetitor", Storage="_lutCategory", ThisKey="intCategory", OtherKey="idCategory", IsForeignKey=true)]
		public lutCategory lutCategory
		{
			get
			{
				return this._lutCategory.Entity;
			}
			set
			{
				lutCategory previousValue = this._lutCategory.Entity;
				if (((previousValue != value) 
							|| (this._lutCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lutCategory.Entity = null;
						previousValue.tblCompetitors.Remove(this);
					}
					this._lutCategory.Entity = value;
					if ((value != null))
					{
						value.tblCompetitors.Add(this);
						this._intCategory = value.idCategory;
					}
					else
					{
						this._intCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("lutCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutGender_tblCompetitor", Storage="_lutGender", ThisKey="intGender", OtherKey="idGender", IsForeignKey=true)]
		public lutGender lutGender
		{
			get
			{
				return this._lutGender.Entity;
			}
			set
			{
				lutGender previousValue = this._lutGender.Entity;
				if (((previousValue != value) 
							|| (this._lutGender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lutGender.Entity = null;
						previousValue.tblCompetitors.Remove(this);
					}
					this._lutGender.Entity = value;
					if ((value != null))
					{
						value.tblCompetitors.Add(this);
						this._intGender = value.idGender;
					}
					else
					{
						this._intGender = default(Nullable<int>);
					}
					this.SendPropertyChanged("lutGender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEventsPlanner(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitorPlanner = this;
		}
		
		private void detach_tblEventsPlanner(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitorPlanner = null;
		}
		
		private void attach_tblEventsController(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitorController = this;
		}
		
		private void detach_tblEventsController(tblEvent entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitorController = null;
		}
		
		private void attach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitor = this;
		}
		
		private void detach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblCompetitor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCourse")]
	public partial class tblCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCourse;
		
		private System.Nullable<int> _intEvent;
		
		private string _strName;
		
		private System.Nullable<short> _intLength;
		
		private System.Nullable<short> _intClimb;
		
		private System.Nullable<short> _intControls;
		
		private System.Nullable<int> _intTechnical;
		
		private System.Nullable<int> _intLog;
		
		private string _strSplitsURL;
		
		private short _intListOrder;
		
		private EntityRef<lutTechnical> _lutTechnical;
		
		private EntityRef<tblEvent> _tblEvent;
		
		private EntityRef<tblLog> _tblLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCourseChanging(int value);
    partial void OnidCourseChanged();
    partial void OnintEventChanging(System.Nullable<int> value);
    partial void OnintEventChanged();
    partial void OnstrNameChanging(string value);
    partial void OnstrNameChanged();
    partial void OnintLengthChanging(System.Nullable<short> value);
    partial void OnintLengthChanged();
    partial void OnintClimbChanging(System.Nullable<short> value);
    partial void OnintClimbChanged();
    partial void OnintControlsChanging(System.Nullable<short> value);
    partial void OnintControlsChanged();
    partial void OnintTechnicalChanging(System.Nullable<int> value);
    partial void OnintTechnicalChanged();
    partial void OnintLogChanging(System.Nullable<int> value);
    partial void OnintLogChanged();
    partial void OnstrSplitsURLChanging(string value);
    partial void OnstrSplitsURLChanged();
    partial void OnintListOrderChanging(short value);
    partial void OnintListOrderChanged();
    #endregion
		
		public tblCourse()
		{
			this._lutTechnical = default(EntityRef<lutTechnical>);
			this._tblEvent = default(EntityRef<tblEvent>);
			this._tblLog = default(EntityRef<tblLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					this.OnidCourseChanging(value);
					this.SendPropertyChanging();
					this._idCourse = value;
					this.SendPropertyChanged("idCourse");
					this.OnidCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intEvent", DbType="Int")]
		public System.Nullable<int> intEvent
		{
			get
			{
				return this._intEvent;
			}
			set
			{
				if ((this._intEvent != value))
				{
					if (this._tblEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintEventChanging(value);
					this.SendPropertyChanging();
					this._intEvent = value;
					this.SendPropertyChanged("intEvent");
					this.OnintEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strName", DbType="NVarChar(50)")]
		public string strName
		{
			get
			{
				return this._strName;
			}
			set
			{
				if ((this._strName != value))
				{
					this.OnstrNameChanging(value);
					this.SendPropertyChanging();
					this._strName = value;
					this.SendPropertyChanged("strName");
					this.OnstrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intLength", DbType="SmallInt")]
		public System.Nullable<short> intLength
		{
			get
			{
				return this._intLength;
			}
			set
			{
				if ((this._intLength != value))
				{
					this.OnintLengthChanging(value);
					this.SendPropertyChanging();
					this._intLength = value;
					this.SendPropertyChanged("intLength");
					this.OnintLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intClimb", DbType="SmallInt")]
		public System.Nullable<short> intClimb
		{
			get
			{
				return this._intClimb;
			}
			set
			{
				if ((this._intClimb != value))
				{
					this.OnintClimbChanging(value);
					this.SendPropertyChanging();
					this._intClimb = value;
					this.SendPropertyChanged("intClimb");
					this.OnintClimbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intControls", DbType="SmallInt")]
		public System.Nullable<short> intControls
		{
			get
			{
				return this._intControls;
			}
			set
			{
				if ((this._intControls != value))
				{
					this.OnintControlsChanging(value);
					this.SendPropertyChanging();
					this._intControls = value;
					this.SendPropertyChanged("intControls");
					this.OnintControlsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intTechnical", DbType="Int")]
		public System.Nullable<int> intTechnical
		{
			get
			{
				return this._intTechnical;
			}
			set
			{
				if ((this._intTechnical != value))
				{
					if (this._lutTechnical.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintTechnicalChanging(value);
					this.SendPropertyChanging();
					this._intTechnical = value;
					this.SendPropertyChanged("intTechnical");
					this.OnintTechnicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intLog", DbType="Int")]
		public System.Nullable<int> intLog
		{
			get
			{
				return this._intLog;
			}
			set
			{
				if ((this._intLog != value))
				{
					if (this._tblLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintLogChanging(value);
					this.SendPropertyChanging();
					this._intLog = value;
					this.SendPropertyChanged("intLog");
					this.OnintLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strSplitsURL", DbType="NVarChar(500)")]
		public string strSplitsURL
		{
			get
			{
				return this._strSplitsURL;
			}
			set
			{
				if ((this._strSplitsURL != value))
				{
					this.OnstrSplitsURLChanging(value);
					this.SendPropertyChanging();
					this._strSplitsURL = value;
					this.SendPropertyChanged("strSplitsURL");
					this.OnstrSplitsURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intListOrder", DbType="SmallInt NOT NULL")]
		public short intListOrder
		{
			get
			{
				return this._intListOrder;
			}
			set
			{
				if ((this._intListOrder != value))
				{
					this.OnintListOrderChanging(value);
					this.SendPropertyChanging();
					this._intListOrder = value;
					this.SendPropertyChanged("intListOrder");
					this.OnintListOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutTechnical_tblCourse", Storage="_lutTechnical", ThisKey="intTechnical", OtherKey="idTechnical", IsForeignKey=true)]
		public lutTechnical lutTechnical
		{
			get
			{
				return this._lutTechnical.Entity;
			}
			set
			{
				lutTechnical previousValue = this._lutTechnical.Entity;
				if (((previousValue != value) 
							|| (this._lutTechnical.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lutTechnical.Entity = null;
						previousValue.tblCourses.Remove(this);
					}
					this._lutTechnical.Entity = value;
					if ((value != null))
					{
						value.tblCourses.Add(this);
						this._intTechnical = value.idTechnical;
					}
					else
					{
						this._intTechnical = default(Nullable<int>);
					}
					this.SendPropertyChanged("lutTechnical");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEvent_tblCourse", Storage="_tblEvent", ThisKey="intEvent", OtherKey="idEvent", IsForeignKey=true)]
		public tblEvent tblEvent
		{
			get
			{
				return this._tblEvent.Entity;
			}
			set
			{
				tblEvent previousValue = this._tblEvent.Entity;
				if (((previousValue != value) 
							|| (this._tblEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEvent.Entity = null;
						previousValue.tblCourses.Remove(this);
					}
					this._tblEvent.Entity = value;
					if ((value != null))
					{
						value.tblCourses.Add(this);
						this._intEvent = value.idEvent;
					}
					else
					{
						this._intEvent = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLog_tblCourse", Storage="_tblLog", ThisKey="intLog", OtherKey="idLog", IsForeignKey=true)]
		public tblLog tblLog
		{
			get
			{
				return this._tblLog.Entity;
			}
			set
			{
				tblLog previousValue = this._tblLog.Entity;
				if (((previousValue != value) 
							|| (this._tblLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLog.Entity = null;
						previousValue.tblCourses.Remove(this);
					}
					this._tblLog.Entity = value;
					if ((value != null))
					{
						value.tblCourses.Add(this);
						this._intLog = value.idLog;
					}
					else
					{
						this._intLog = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDownload")]
	public partial class tblDownload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDownload;
		
		private string _strTitle;
		
		private string _strDescription;
		
		private int _intFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDownloadChanging(int value);
    partial void OnidDownloadChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void OnstrDescriptionChanging(string value);
    partial void OnstrDescriptionChanged();
    partial void OnintFileChanging(int value);
    partial void OnintFileChanged();
    #endregion
		
		public tblDownload()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDownload", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDownload
		{
			get
			{
				return this._idDownload;
			}
			set
			{
				if ((this._idDownload != value))
				{
					this.OnidDownloadChanging(value);
					this.SendPropertyChanging();
					this._idDownload = value;
					this.SendPropertyChanged("idDownload");
					this.OnidDownloadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTitle", DbType="VarChar(100)")]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strDescription", DbType="VarChar(1000)")]
		public string strDescription
		{
			get
			{
				return this._strDescription;
			}
			set
			{
				if ((this._strDescription != value))
				{
					this.OnstrDescriptionChanging(value);
					this.SendPropertyChanging();
					this._strDescription = value;
					this.SendPropertyChanged("strDescription");
					this.OnstrDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intFile", DbType="Int NOT NULL")]
		public int intFile
		{
			get
			{
				return this._intFile;
			}
			set
			{
				if ((this._intFile != value))
				{
					this.OnintFileChanging(value);
					this.SendPropertyChanging();
					this._intFile = value;
					this.SendPropertyChanged("intFile");
					this.OnintFileChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEvent")]
	public partial class tblEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEvent;
		
		private string _strName;
		
		private System.Nullable<System.DateTime> _dteDate;
		
		private System.Nullable<int> _intVenue;
		
		private string _strContact;
		
		private System.Nullable<int> _intPlanner;
		
		private System.Nullable<int> _intController;
		
		private string _strResults;
		
		private string _strPhotos;
		
		private string _strPlannerReport;
		
		private string _strControllerReport;
		
		private string _strSpecialNote;
		
		private string _strRegTime;
		
		private string _strStarts;
		
		private string _strClose;
		
		private string _strDirections;
		
		private string _strCourses;
		
		private string _strNotice;
		
		private System.Nullable<int> _intMaxPoints;
		
		private System.Nullable<int> _intOrganisingClub;
		
		private string _strCost1;
		
		private System.Nullable<decimal> _decCoordinateLat;
		
		private System.Nullable<decimal> _decCoordinateLong;
		
		private string _strCost;
		
		private EntitySet<tblCourse> _tblCourses;
		
		private EntityRef<lutClub> _lutClub;
		
		private EntityRef<tblVenue> _tblVenue;
		
		private EntityRef<tblCompetitor> _tblCompetitorPlanner;
		
		private EntityRef<tblCompetitor> _tblCompetitorController;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEventChanging(int value);
    partial void OnidEventChanged();
    partial void OnstrNameChanging(string value);
    partial void OnstrNameChanged();
    partial void OndteDateChanging(System.Nullable<System.DateTime> value);
    partial void OndteDateChanged();
    partial void OnintVenueChanging(System.Nullable<int> value);
    partial void OnintVenueChanged();
    partial void OnstrContactChanging(string value);
    partial void OnstrContactChanged();
    partial void OnintPlannerChanging(System.Nullable<int> value);
    partial void OnintPlannerChanged();
    partial void OnintControllerChanging(System.Nullable<int> value);
    partial void OnintControllerChanged();
    partial void OnstrResultsChanging(string value);
    partial void OnstrResultsChanged();
    partial void OnstrPhotosChanging(string value);
    partial void OnstrPhotosChanged();
    partial void OnstrPlannerReportChanging(string value);
    partial void OnstrPlannerReportChanged();
    partial void OnstrControllerReportChanging(string value);
    partial void OnstrControllerReportChanged();
    partial void OnstrSpecialNoteChanging(string value);
    partial void OnstrSpecialNoteChanged();
    partial void OnstrRegTimeChanging(string value);
    partial void OnstrRegTimeChanged();
    partial void OnstrStartsChanging(string value);
    partial void OnstrStartsChanged();
    partial void OnstrCloseChanging(string value);
    partial void OnstrCloseChanged();
    partial void OnstrDirectionsChanging(string value);
    partial void OnstrDirectionsChanged();
    partial void OnstrCoursesChanging(string value);
    partial void OnstrCoursesChanged();
    partial void OnstrNoticeChanging(string value);
    partial void OnstrNoticeChanged();
    partial void OnintMaxPointsChanging(System.Nullable<int> value);
    partial void OnintMaxPointsChanged();
    partial void OnintOrganisingClubChanging(System.Nullable<int> value);
    partial void OnintOrganisingClubChanged();
    partial void OnstrCost1Changing(string value);
    partial void OnstrCost1Changed();
    partial void OndecCoordinateLatChanging(System.Nullable<decimal> value);
    partial void OndecCoordinateLatChanged();
    partial void OndecCoordinateLongChanging(System.Nullable<decimal> value);
    partial void OndecCoordinateLongChanged();
    partial void OnstrCostChanging(string value);
    partial void OnstrCostChanged();
    #endregion
		
		public tblEvent()
		{
			this._tblCourses = new EntitySet<tblCourse>(new Action<tblCourse>(this.attach_tblCourses), new Action<tblCourse>(this.detach_tblCourses));
			this._lutClub = default(EntityRef<lutClub>);
			this._tblVenue = default(EntityRef<tblVenue>);
			this._tblCompetitorPlanner = default(EntityRef<tblCompetitor>);
			this._tblCompetitorController = default(EntityRef<tblCompetitor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strName", DbType="NVarChar(50)")]
		public string strName
		{
			get
			{
				return this._strName;
			}
			set
			{
				if ((this._strName != value))
				{
					this.OnstrNameChanging(value);
					this.SendPropertyChanging();
					this._strName = value;
					this.SendPropertyChanged("strName");
					this.OnstrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dteDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> dteDate
		{
			get
			{
				return this._dteDate;
			}
			set
			{
				if ((this._dteDate != value))
				{
					this.OndteDateChanging(value);
					this.SendPropertyChanging();
					this._dteDate = value;
					this.SendPropertyChanged("dteDate");
					this.OndteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intVenue", DbType="Int")]
		public System.Nullable<int> intVenue
		{
			get
			{
				return this._intVenue;
			}
			set
			{
				if ((this._intVenue != value))
				{
					if (this._tblVenue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintVenueChanging(value);
					this.SendPropertyChanging();
					this._intVenue = value;
					this.SendPropertyChanged("intVenue");
					this.OnintVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strContact", DbType="NVarChar(50)")]
		public string strContact
		{
			get
			{
				return this._strContact;
			}
			set
			{
				if ((this._strContact != value))
				{
					this.OnstrContactChanging(value);
					this.SendPropertyChanging();
					this._strContact = value;
					this.SendPropertyChanged("strContact");
					this.OnstrContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intPlanner", DbType="Int")]
		public System.Nullable<int> intPlanner
		{
			get
			{
				return this._intPlanner;
			}
			set
			{
				if ((this._intPlanner != value))
				{
					if (this._tblCompetitorPlanner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintPlannerChanging(value);
					this.SendPropertyChanging();
					this._intPlanner = value;
					this.SendPropertyChanged("intPlanner");
					this.OnintPlannerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intController", DbType="Int")]
		public System.Nullable<int> intController
		{
			get
			{
				return this._intController;
			}
			set
			{
				if ((this._intController != value))
				{
					if (this._tblCompetitorController.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintControllerChanging(value);
					this.SendPropertyChanging();
					this._intController = value;
					this.SendPropertyChanged("intController");
					this.OnintControllerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strResults", DbType="NVarChar(255)")]
		public string strResults
		{
			get
			{
				return this._strResults;
			}
			set
			{
				if ((this._strResults != value))
				{
					this.OnstrResultsChanging(value);
					this.SendPropertyChanging();
					this._strResults = value;
					this.SendPropertyChanged("strResults");
					this.OnstrResultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strPhotos", DbType="NVarChar(255)")]
		public string strPhotos
		{
			get
			{
				return this._strPhotos;
			}
			set
			{
				if ((this._strPhotos != value))
				{
					this.OnstrPhotosChanging(value);
					this.SendPropertyChanging();
					this._strPhotos = value;
					this.SendPropertyChanged("strPhotos");
					this.OnstrPhotosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strPlannerReport", DbType="VarChar(8000)")]
		public string strPlannerReport
		{
			get
			{
				return this._strPlannerReport;
			}
			set
			{
				if ((this._strPlannerReport != value))
				{
					this.OnstrPlannerReportChanging(value);
					this.SendPropertyChanging();
					this._strPlannerReport = value;
					this.SendPropertyChanged("strPlannerReport");
					this.OnstrPlannerReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strControllerReport", DbType="VarChar(8000)")]
		public string strControllerReport
		{
			get
			{
				return this._strControllerReport;
			}
			set
			{
				if ((this._strControllerReport != value))
				{
					this.OnstrControllerReportChanging(value);
					this.SendPropertyChanging();
					this._strControllerReport = value;
					this.SendPropertyChanged("strControllerReport");
					this.OnstrControllerReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strSpecialNote", DbType="VarChar(8000)")]
		public string strSpecialNote
		{
			get
			{
				return this._strSpecialNote;
			}
			set
			{
				if ((this._strSpecialNote != value))
				{
					this.OnstrSpecialNoteChanging(value);
					this.SendPropertyChanging();
					this._strSpecialNote = value;
					this.SendPropertyChanged("strSpecialNote");
					this.OnstrSpecialNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strRegTime", DbType="NVarChar(100)")]
		public string strRegTime
		{
			get
			{
				return this._strRegTime;
			}
			set
			{
				if ((this._strRegTime != value))
				{
					this.OnstrRegTimeChanging(value);
					this.SendPropertyChanging();
					this._strRegTime = value;
					this.SendPropertyChanged("strRegTime");
					this.OnstrRegTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strStarts", DbType="NVarChar(100)")]
		public string strStarts
		{
			get
			{
				return this._strStarts;
			}
			set
			{
				if ((this._strStarts != value))
				{
					this.OnstrStartsChanging(value);
					this.SendPropertyChanging();
					this._strStarts = value;
					this.SendPropertyChanged("strStarts");
					this.OnstrStartsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strClose", DbType="NVarChar(50)")]
		public string strClose
		{
			get
			{
				return this._strClose;
			}
			set
			{
				if ((this._strClose != value))
				{
					this.OnstrCloseChanging(value);
					this.SendPropertyChanging();
					this._strClose = value;
					this.SendPropertyChanged("strClose");
					this.OnstrCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strDirections", DbType="VarChar(8000)")]
		public string strDirections
		{
			get
			{
				return this._strDirections;
			}
			set
			{
				if ((this._strDirections != value))
				{
					this.OnstrDirectionsChanging(value);
					this.SendPropertyChanging();
					this._strDirections = value;
					this.SendPropertyChanged("strDirections");
					this.OnstrDirectionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strCourses", DbType="VarChar(8000)")]
		public string strCourses
		{
			get
			{
				return this._strCourses;
			}
			set
			{
				if ((this._strCourses != value))
				{
					this.OnstrCoursesChanging(value);
					this.SendPropertyChanging();
					this._strCourses = value;
					this.SendPropertyChanged("strCourses");
					this.OnstrCoursesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strNotice", DbType="NVarChar(255)")]
		public string strNotice
		{
			get
			{
				return this._strNotice;
			}
			set
			{
				if ((this._strNotice != value))
				{
					this.OnstrNoticeChanging(value);
					this.SendPropertyChanging();
					this._strNotice = value;
					this.SendPropertyChanged("strNotice");
					this.OnstrNoticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intMaxPoints", DbType="Int")]
		public System.Nullable<int> intMaxPoints
		{
			get
			{
				return this._intMaxPoints;
			}
			set
			{
				if ((this._intMaxPoints != value))
				{
					this.OnintMaxPointsChanging(value);
					this.SendPropertyChanging();
					this._intMaxPoints = value;
					this.SendPropertyChanged("intMaxPoints");
					this.OnintMaxPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intOrganisingClub", DbType="Int")]
		public System.Nullable<int> intOrganisingClub
		{
			get
			{
				return this._intOrganisingClub;
			}
			set
			{
				if ((this._intOrganisingClub != value))
				{
					if (this._lutClub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintOrganisingClubChanging(value);
					this.SendPropertyChanging();
					this._intOrganisingClub = value;
					this.SendPropertyChanged("intOrganisingClub");
					this.OnintOrganisingClubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strCost1", DbType="VarChar(500)")]
		public string strCost1
		{
			get
			{
				return this._strCost1;
			}
			set
			{
				if ((this._strCost1 != value))
				{
					this.OnstrCost1Changing(value);
					this.SendPropertyChanging();
					this._strCost1 = value;
					this.SendPropertyChanged("strCost1");
					this.OnstrCost1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decCoordinateLat", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> decCoordinateLat
		{
			get
			{
				return this._decCoordinateLat;
			}
			set
			{
				if ((this._decCoordinateLat != value))
				{
					this.OndecCoordinateLatChanging(value);
					this.SendPropertyChanging();
					this._decCoordinateLat = value;
					this.SendPropertyChanged("decCoordinateLat");
					this.OndecCoordinateLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decCoordinateLong", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> decCoordinateLong
		{
			get
			{
				return this._decCoordinateLong;
			}
			set
			{
				if ((this._decCoordinateLong != value))
				{
					this.OndecCoordinateLongChanging(value);
					this.SendPropertyChanging();
					this._decCoordinateLong = value;
					this.SendPropertyChanged("decCoordinateLong");
					this.OndecCoordinateLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strCost", DbType="NVarChar(2000)")]
		public string strCost
		{
			get
			{
				return this._strCost;
			}
			set
			{
				if ((this._strCost != value))
				{
					this.OnstrCostChanging(value);
					this.SendPropertyChanging();
					this._strCost = value;
					this.SendPropertyChanged("strCost");
					this.OnstrCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEvent_tblCourse", Storage="_tblCourses", ThisKey="idEvent", OtherKey="intEvent")]
		public EntitySet<tblCourse> tblCourses
		{
			get
			{
				return this._tblCourses;
			}
			set
			{
				this._tblCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lutClub_tblEvent", Storage="_lutClub", ThisKey="intOrganisingClub", OtherKey="idClub", IsForeignKey=true)]
		public lutClub lutClub
		{
			get
			{
				return this._lutClub.Entity;
			}
			set
			{
				lutClub previousValue = this._lutClub.Entity;
				if (((previousValue != value) 
							|| (this._lutClub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lutClub.Entity = null;
						previousValue.tblEvents.Remove(this);
					}
					this._lutClub.Entity = value;
					if ((value != null))
					{
						value.tblEvents.Add(this);
						this._intOrganisingClub = value.idClub;
					}
					else
					{
						this._intOrganisingClub = default(Nullable<int>);
					}
					this.SendPropertyChanged("lutClub");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVenue_tblEvent", Storage="_tblVenue", ThisKey="intVenue", OtherKey="idVenue", IsForeignKey=true)]
		public tblVenue tblVenue
		{
			get
			{
				return this._tblVenue.Entity;
			}
			set
			{
				tblVenue previousValue = this._tblVenue.Entity;
				if (((previousValue != value) 
							|| (this._tblVenue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblVenue.Entity = null;
						previousValue.tblEvents.Remove(this);
					}
					this._tblVenue.Entity = value;
					if ((value != null))
					{
						value.tblEvents.Add(this);
						this._intVenue = value.idVenue;
					}
					else
					{
						this._intVenue = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblVenue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblEvent", Storage="_tblCompetitorPlanner", ThisKey="intPlanner", OtherKey="idCompetitor", IsForeignKey=true)]
		public tblCompetitor tblCompetitorPlanner
		{
			get
			{
				return this._tblCompetitorPlanner.Entity;
			}
			set
			{
				tblCompetitor previousValue = this._tblCompetitorPlanner.Entity;
				if (((previousValue != value) 
							|| (this._tblCompetitorPlanner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCompetitorPlanner.Entity = null;
						previousValue.tblEventsPlanner.Remove(this);
					}
					this._tblCompetitorPlanner.Entity = value;
					if ((value != null))
					{
						value.tblEventsPlanner.Add(this);
						this._intPlanner = value.idCompetitor;
					}
					else
					{
						this._intPlanner = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCompetitorPlanner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblEvent1", Storage="_tblCompetitorController", ThisKey="intController", OtherKey="idCompetitor", IsForeignKey=true)]
		public tblCompetitor tblCompetitorController
		{
			get
			{
				return this._tblCompetitorController.Entity;
			}
			set
			{
				tblCompetitor previousValue = this._tblCompetitorController.Entity;
				if (((previousValue != value) 
							|| (this._tblCompetitorController.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCompetitorController.Entity = null;
						previousValue.tblEventsController.Remove(this);
					}
					this._tblCompetitorController.Entity = value;
					if ((value != null))
					{
						value.tblEventsController.Add(this);
						this._intController = value.idCompetitor;
					}
					else
					{
						this._intController = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCompetitorController");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.tblEvent = this;
		}
		
		private void detach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.tblEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEvent_EventType")]
	public partial class tblEvent_EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _intEvent;
		
		private int _intEventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnintEventChanging(int value);
    partial void OnintEventChanged();
    partial void OnintEventTypeChanging(int value);
    partial void OnintEventTypeChanged();
    #endregion
		
		public tblEvent_EventType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intEvent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intEvent
		{
			get
			{
				return this._intEvent;
			}
			set
			{
				if ((this._intEvent != value))
				{
					this.OnintEventChanging(value);
					this.SendPropertyChanging();
					this._intEvent = value;
					this.SendPropertyChanged("intEvent");
					this.OnintEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intEventType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intEventType
		{
			get
			{
				return this._intEventType;
			}
			set
			{
				if ((this._intEventType != value))
				{
					this.OnintEventTypeChanging(value);
					this.SendPropertyChanging();
					this._intEventType = value;
					this.SendPropertyChanged("intEventType");
					this.OnintEventTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblFile")]
	public partial class tblFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idFile;
		
		private string _strFileName;
		
		private System.Data.Linq.Binary _imgFile;
		
		private string _strdescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFileChanging(int value);
    partial void OnidFileChanged();
    partial void OnstrFileNameChanging(string value);
    partial void OnstrFileNameChanged();
    partial void OnimgFileChanging(System.Data.Linq.Binary value);
    partial void OnimgFileChanged();
    partial void OnstrdescriptionChanging(string value);
    partial void OnstrdescriptionChanged();
    #endregion
		
		public tblFile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFile", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idFile
		{
			get
			{
				return this._idFile;
			}
			set
			{
				if ((this._idFile != value))
				{
					this.OnidFileChanging(value);
					this.SendPropertyChanging();
					this._idFile = value;
					this.SendPropertyChanged("idFile");
					this.OnidFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strFileName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string strFileName
		{
			get
			{
				return this._strFileName;
			}
			set
			{
				if ((this._strFileName != value))
				{
					this.OnstrFileNameChanging(value);
					this.SendPropertyChanging();
					this._strFileName = value;
					this.SendPropertyChanged("strFileName");
					this.OnstrFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imgFile", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imgFile
		{
			get
			{
				return this._imgFile;
			}
			set
			{
				if ((this._imgFile != value))
				{
					this.OnimgFileChanging(value);
					this.SendPropertyChanging();
					this._imgFile = value;
					this.SendPropertyChanged("imgFile");
					this.OnimgFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strdescription", DbType="VarChar(50)")]
		public string strdescription
		{
			get
			{
				return this._strdescription;
			}
			set
			{
				if ((this._strdescription != value))
				{
					this.OnstrdescriptionChanging(value);
					this.SendPropertyChanging();
					this._strdescription = value;
					this.SendPropertyChanged("strdescription");
					this.OnstrdescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLog")]
	public partial class tblLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idLog;
		
		private int _intYear;
		
		private string _strLog;
		
		private int _intDisregardWorst;
		
		private bool _blnCurrent;
		
		private EntitySet<tblCourse> _tblCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLogChanging(int value);
    partial void OnidLogChanged();
    partial void OnintYearChanging(int value);
    partial void OnintYearChanged();
    partial void OnstrLogChanging(string value);
    partial void OnstrLogChanged();
    partial void OnintDisregardWorstChanging(int value);
    partial void OnintDisregardWorstChanged();
    partial void OnblnCurrentChanging(bool value);
    partial void OnblnCurrentChanged();
    #endregion
		
		public tblLog()
		{
			this._tblCourses = new EntitySet<tblCourse>(new Action<tblCourse>(this.attach_tblCourses), new Action<tblCourse>(this.detach_tblCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLog", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idLog
		{
			get
			{
				return this._idLog;
			}
			set
			{
				if ((this._idLog != value))
				{
					this.OnidLogChanging(value);
					this.SendPropertyChanging();
					this._idLog = value;
					this.SendPropertyChanged("idLog");
					this.OnidLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intYear", DbType="Int NOT NULL")]
		public int intYear
		{
			get
			{
				return this._intYear;
			}
			set
			{
				if ((this._intYear != value))
				{
					this.OnintYearChanging(value);
					this.SendPropertyChanging();
					this._intYear = value;
					this.SendPropertyChanged("intYear");
					this.OnintYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strLog", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string strLog
		{
			get
			{
				return this._strLog;
			}
			set
			{
				if ((this._strLog != value))
				{
					this.OnstrLogChanging(value);
					this.SendPropertyChanging();
					this._strLog = value;
					this.SendPropertyChanged("strLog");
					this.OnstrLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intDisregardWorst", DbType="Int NOT NULL")]
		public int intDisregardWorst
		{
			get
			{
				return this._intDisregardWorst;
			}
			set
			{
				if ((this._intDisregardWorst != value))
				{
					this.OnintDisregardWorstChanging(value);
					this.SendPropertyChanging();
					this._intDisregardWorst = value;
					this.SendPropertyChanged("intDisregardWorst");
					this.OnintDisregardWorstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blnCurrent", DbType="Bit NOT NULL")]
		public bool blnCurrent
		{
			get
			{
				return this._blnCurrent;
			}
			set
			{
				if ((this._blnCurrent != value))
				{
					this.OnblnCurrentChanging(value);
					this.SendPropertyChanging();
					this._blnCurrent = value;
					this.SendPropertyChanged("blnCurrent");
					this.OnblnCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLog_tblCourse", Storage="_tblCourses", ThisKey="idLog", OtherKey="intLog")]
		public EntitySet<tblCourse> tblCourses
		{
			get
			{
				return this._tblCourses;
			}
			set
			{
				this._tblCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.tblLog = this;
		}
		
		private void detach_tblCourses(tblCourse entity)
		{
			this.SendPropertyChanging();
			entity.tblLog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblNews")]
	public partial class tblNews : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idNews;
		
		private string _strNews;
		
		private System.DateTime _dteDate;
		
		private string _strTitle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidNewsChanging(int value);
    partial void OnidNewsChanged();
    partial void OnstrNewsChanging(string value);
    partial void OnstrNewsChanged();
    partial void OndteDateChanging(System.DateTime value);
    partial void OndteDateChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    #endregion
		
		public tblNews()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idNews", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idNews
		{
			get
			{
				return this._idNews;
			}
			set
			{
				if ((this._idNews != value))
				{
					this.OnidNewsChanging(value);
					this.SendPropertyChanging();
					this._idNews = value;
					this.SendPropertyChanged("idNews");
					this.OnidNewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strNews", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string strNews
		{
			get
			{
				return this._strNews;
			}
			set
			{
				if ((this._strNews != value))
				{
					this.OnstrNewsChanging(value);
					this.SendPropertyChanging();
					this._strNews = value;
					this.SendPropertyChanged("strNews");
					this.OnstrNewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dteDate", DbType="DateTime NOT NULL")]
		public System.DateTime dteDate
		{
			get
			{
				return this._dteDate;
			}
			set
			{
				if ((this._dteDate != value))
				{
					this.OndteDateChanging(value);
					this.SendPropertyChanging();
					this._dteDate = value;
					this.SendPropertyChanged("dteDate");
					this.OndteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTitle", DbType="VarChar(500)")]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblResult")]
	public partial class tblResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _intCompetitor;
		
		private int _intCourse;
		
		private System.Nullable<int> _intClub;
		
		private System.Nullable<int> _intCategory;
		
		private System.Nullable<System.DateTime> _dteTime;
		
		private bool _blnDisqualified;
		
		private string _strComment;
		
		private System.Nullable<int> _intPosition;
		
		private System.Nullable<int> _intPoints;
		
		private string _strRaceNumber;
		
		private EntityRef<tblCompetitor> _tblCompetitor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnintCompetitorChanging(int value);
    partial void OnintCompetitorChanged();
    partial void OnintCourseChanging(int value);
    partial void OnintCourseChanged();
    partial void OnintClubChanging(System.Nullable<int> value);
    partial void OnintClubChanged();
    partial void OnintCategoryChanging(System.Nullable<int> value);
    partial void OnintCategoryChanged();
    partial void OndteTimeChanging(System.Nullable<System.DateTime> value);
    partial void OndteTimeChanged();
    partial void OnblnDisqualifiedChanging(bool value);
    partial void OnblnDisqualifiedChanged();
    partial void OnstrCommentChanging(string value);
    partial void OnstrCommentChanged();
    partial void OnintPositionChanging(System.Nullable<int> value);
    partial void OnintPositionChanged();
    partial void OnintPointsChanging(System.Nullable<int> value);
    partial void OnintPointsChanged();
    partial void OnstrRaceNumberChanging(string value);
    partial void OnstrRaceNumberChanged();
    #endregion
		
		public tblResult()
		{
			this._tblCompetitor = default(EntityRef<tblCompetitor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCompetitor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intCompetitor
		{
			get
			{
				return this._intCompetitor;
			}
			set
			{
				if ((this._intCompetitor != value))
				{
					if (this._tblCompetitor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintCompetitorChanging(value);
					this.SendPropertyChanging();
					this._intCompetitor = value;
					this.SendPropertyChanged("intCompetitor");
					this.OnintCompetitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCourse", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intCourse
		{
			get
			{
				return this._intCourse;
			}
			set
			{
				if ((this._intCourse != value))
				{
					this.OnintCourseChanging(value);
					this.SendPropertyChanging();
					this._intCourse = value;
					this.SendPropertyChanged("intCourse");
					this.OnintCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intClub", DbType="Int")]
		public System.Nullable<int> intClub
		{
			get
			{
				return this._intClub;
			}
			set
			{
				if ((this._intClub != value))
				{
					this.OnintClubChanging(value);
					this.SendPropertyChanging();
					this._intClub = value;
					this.SendPropertyChanged("intClub");
					this.OnintClubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCategory", DbType="Int")]
		public System.Nullable<int> intCategory
		{
			get
			{
				return this._intCategory;
			}
			set
			{
				if ((this._intCategory != value))
				{
					this.OnintCategoryChanging(value);
					this.SendPropertyChanging();
					this._intCategory = value;
					this.SendPropertyChanged("intCategory");
					this.OnintCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dteTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> dteTime
		{
			get
			{
				return this._dteTime;
			}
			set
			{
				if ((this._dteTime != value))
				{
					this.OndteTimeChanging(value);
					this.SendPropertyChanging();
					this._dteTime = value;
					this.SendPropertyChanged("dteTime");
					this.OndteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blnDisqualified", DbType="Bit NOT NULL")]
		public bool blnDisqualified
		{
			get
			{
				return this._blnDisqualified;
			}
			set
			{
				if ((this._blnDisqualified != value))
				{
					this.OnblnDisqualifiedChanging(value);
					this.SendPropertyChanging();
					this._blnDisqualified = value;
					this.SendPropertyChanged("blnDisqualified");
					this.OnblnDisqualifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strComment", DbType="NVarChar(255)")]
		public string strComment
		{
			get
			{
				return this._strComment;
			}
			set
			{
				if ((this._strComment != value))
				{
					this.OnstrCommentChanging(value);
					this.SendPropertyChanging();
					this._strComment = value;
					this.SendPropertyChanged("strComment");
					this.OnstrCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intPosition", DbType="Int")]
		public System.Nullable<int> intPosition
		{
			get
			{
				return this._intPosition;
			}
			set
			{
				if ((this._intPosition != value))
				{
					this.OnintPositionChanging(value);
					this.SendPropertyChanging();
					this._intPosition = value;
					this.SendPropertyChanged("intPosition");
					this.OnintPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intPoints", DbType="Int")]
		public System.Nullable<int> intPoints
		{
			get
			{
				return this._intPoints;
			}
			set
			{
				if ((this._intPoints != value))
				{
					this.OnintPointsChanging(value);
					this.SendPropertyChanging();
					this._intPoints = value;
					this.SendPropertyChanged("intPoints");
					this.OnintPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strRaceNumber", DbType="NVarChar(20)")]
		public string strRaceNumber
		{
			get
			{
				return this._strRaceNumber;
			}
			set
			{
				if ((this._strRaceNumber != value))
				{
					this.OnstrRaceNumberChanging(value);
					this.SendPropertyChanging();
					this._strRaceNumber = value;
					this.SendPropertyChanged("strRaceNumber");
					this.OnstrRaceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblResult", Storage="_tblCompetitor", ThisKey="intCompetitor", OtherKey="idCompetitor", IsForeignKey=true)]
		public tblCompetitor tblCompetitor
		{
			get
			{
				return this._tblCompetitor.Entity;
			}
			set
			{
				tblCompetitor previousValue = this._tblCompetitor.Entity;
				if (((previousValue != value) 
							|| (this._tblCompetitor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCompetitor.Entity = null;
						previousValue.tblResults.Remove(this);
					}
					this._tblCompetitor.Entity = value;
					if ((value != null))
					{
						value.tblResults.Add(this);
						this._intCompetitor = value.idCompetitor;
					}
					else
					{
						this._intCompetitor = default(int);
					}
					this.SendPropertyChanged("tblCompetitor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _intCompetitor;
		
		private string _strUserName;
		
		private string _strPassword;
		
		private bool _blnEnabled;
		
		private bool _blnAdministrator;
		
		private EntityRef<tblCompetitor> _tblCompetitor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnintCompetitorChanging(int value);
    partial void OnintCompetitorChanged();
    partial void OnstrUserNameChanging(string value);
    partial void OnstrUserNameChanged();
    partial void OnstrPasswordChanging(string value);
    partial void OnstrPasswordChanged();
    partial void OnblnEnabledChanging(bool value);
    partial void OnblnEnabledChanged();
    partial void OnblnAdministratorChanging(bool value);
    partial void OnblnAdministratorChanged();
    #endregion
		
		public tblUser()
		{
			this._tblCompetitor = default(EntityRef<tblCompetitor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intCompetitor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int intCompetitor
		{
			get
			{
				return this._intCompetitor;
			}
			set
			{
				if ((this._intCompetitor != value))
				{
					if (this._tblCompetitor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintCompetitorChanging(value);
					this.SendPropertyChanging();
					this._intCompetitor = value;
					this.SendPropertyChanged("intCompetitor");
					this.OnintCompetitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strUserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string strUserName
		{
			get
			{
				return this._strUserName;
			}
			set
			{
				if ((this._strUserName != value))
				{
					this.OnstrUserNameChanging(value);
					this.SendPropertyChanging();
					this._strUserName = value;
					this.SendPropertyChanged("strUserName");
					this.OnstrUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string strPassword
		{
			get
			{
				return this._strPassword;
			}
			set
			{
				if ((this._strPassword != value))
				{
					this.OnstrPasswordChanging(value);
					this.SendPropertyChanging();
					this._strPassword = value;
					this.SendPropertyChanged("strPassword");
					this.OnstrPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blnEnabled", DbType="Bit NOT NULL")]
		public bool blnEnabled
		{
			get
			{
				return this._blnEnabled;
			}
			set
			{
				if ((this._blnEnabled != value))
				{
					this.OnblnEnabledChanging(value);
					this.SendPropertyChanging();
					this._blnEnabled = value;
					this.SendPropertyChanged("blnEnabled");
					this.OnblnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blnAdministrator", DbType="Bit NOT NULL")]
		public bool blnAdministrator
		{
			get
			{
				return this._blnAdministrator;
			}
			set
			{
				if ((this._blnAdministrator != value))
				{
					this.OnblnAdministratorChanging(value);
					this.SendPropertyChanging();
					this._blnAdministrator = value;
					this.SendPropertyChanged("blnAdministrator");
					this.OnblnAdministratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCompetitor_tblUser", Storage="_tblCompetitor", ThisKey="intCompetitor", OtherKey="idCompetitor", IsForeignKey=true)]
		public tblCompetitor tblCompetitor
		{
			get
			{
				return this._tblCompetitor.Entity;
			}
			set
			{
				tblCompetitor previousValue = this._tblCompetitor.Entity;
				if (((previousValue != value) 
							|| (this._tblCompetitor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCompetitor.Entity = null;
						previousValue.tblUser = null;
					}
					this._tblCompetitor.Entity = value;
					if ((value != null))
					{
						value.tblUser = this;
						this._intCompetitor = value.idCompetitor;
					}
					else
					{
						this._intCompetitor = default(int);
					}
					this.SendPropertyChanged("tblCompetitor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
